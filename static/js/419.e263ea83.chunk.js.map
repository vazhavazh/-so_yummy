{"version":3,"file":"static/js/419.e263ea83.chunk.js","mappings":"qJACA,EAAwW,8BAAxW,EAAsZ,kCAAtZ,EAAoc,8BAApc,EAAgf,gCAAhf,EAA6hB,+BAA7hB,EAAykB,+B,UCG5jBA,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnBC,EAA2CD,EAA3CC,MAAOC,EAAoCF,EAApCE,QAASC,EAA2BH,EAA3BG,IAAKC,EAAsBJ,EAAtBI,KAAMC,EAAgBL,EAAhBK,YACnC,OACE,eAAIC,UAAWC,EAAf,UACE,eAAGC,KAAI,kBAAaL,EAAIM,MAAxB,WACE,gBAAKH,UAAWC,EAAiBG,IAAKR,EAASS,IAAI,oBACnD,cAAGL,UAAWC,EAAd,SAAkCN,KAClC,iBAAKK,UAAWC,EAAhB,WACE,cAAGD,UAAWC,EAAd,gCAAuCH,EAAvC,WACA,cAAGE,UAAWC,EAAd,SAAiCF,WAK1C,C,m3tCCFDO,QAAQC,IAAIC,EAAAA,GAEL,IAAMC,EAAa,WACxB,OAA0BC,EAAAA,EAAAA,UAAS,QAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KACA,GAA0CJ,EAAAA,EAAAA,UAAS,IAAnD,eAAOK,EAAP,KAAsBC,EAAtB,MAEAC,EAAAA,EAAAA,YAAU,WACRD,EAAiBE,EAAAA,KAAW,SAAAC,GAAI,OAAIA,EAAKC,QAAT,KAChCN,EAAYI,EAAAA,QAAc,SAAAC,GAAI,OAAIA,EAAKC,WAAaT,CAAtB,IAC/B,GAAE,CAACA,IACJ,IAIMU,EAAiBN,EAAcO,QACnC,SAACC,EAAQC,EAAOC,GAAhB,OAA0BA,EAAMC,QAAQH,KAAYC,CAApD,IAGF,OACE,iBAAKxB,UAAU,aAAf,WACE,eAAIA,UAAU,mBAAd,SAAiC,iBACjC,UAAC2B,EAAA,GAAD,CAAYhB,MAAOA,EAAnB,WACE,gBAAKX,UAAU,sBAAf,UACE,SAAC4B,EAAA,EAAD,CACEC,QAAQ,aACRC,cAAc,OACdC,SAhBW,SAACC,EAAOC,GAC3BrB,EAASoB,EAAME,OAAOC,aACtBrB,EAAYI,EAAAA,QAAc,SAAAC,GAAI,OAAIA,EAAKC,WAAaT,CAAtB,IAC/B,EAcSyB,GAAI,CACF,sBAAuB,CACrB,mCAAoC,CAClCC,gBAAiB,YAGrB,2BAA4B,CAC1BC,IAAK,OACL,4BAA6B,CAC3BA,IAAK,QAEP,WAAY,CACVC,MAAO,YAIX,iBAAkB,CAChBC,cAAe,aACfC,SAAU,IACVC,SAAU,OACVC,WAAY,UACZC,WAAY,MACZC,WAAY,OACZC,YAAa,WAEf,qBAAsB,CACpBC,KAAM,UACN,WAAY,CACVA,KAAM,aAhCd,SAqCG1B,EAAe2B,KAAI,SAAA5B,GAClB,OACE,SAAC6B,EAAA,EAAD,CACEC,MAAO9B,EACPT,MAAOS,EAEPgB,GAAI,CACFe,QAAS,IACTZ,MAAO,UACP,iBAAkB,CAChBA,MAAO,cALNa,EAAAA,EAAAA,UAUV,SAGL,SAACC,EAAA,EAAD,CAAU1C,MAAOA,EAAOyB,GAAI,CAAEkB,EAAG,GAAjC,UACE,eAAItD,UAAU,mBAAd,SACGa,EAAS0C,OAAS,EACjB1C,EAASmC,KAAI,SAAAtD,GACX,OAAO,SAACD,EAAA,EAAD,CAAkCC,OAAQA,GAAzBA,EAAOG,IAAIM,KACpC,KAED,yBAAK,wBAOlB,EClGD,EARuB,WACrB,OACE,0BACE,SAAC,EAAD,KAGL,C","sources":["webpack://so_yummy/./src/components/RecipeCard/RecipeCard.module.scss?da97","components/RecipeCard/RecipeCard.jsx","components/Categories/Categories.jsx","pages/CategoriesPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dark-mode\":\"RecipeCard_dark-mode__Rp+Nw\",\"remove-btnX\":\"RecipeCard_remove-btnX__NKtwf\",\"remove-btnX--icon\":\"RecipeCard_remove-btnX--icon__kqNdU\",\"base-link-leaf\":\"RecipeCard_base-link-leaf__C388J\",\"trashBtn\":\"RecipeCard_trashBtn__-tz+x\",\"trashBtn--icon\":\"RecipeCard_trashBtn--icon__-fPF4\",\"container\":\"RecipeCard_container__-tK73\",\"recipeEll\":\"RecipeCard_recipeEll__KT0Cb\",\"recipeOverlay\":\"RecipeCard_recipeOverlay__-FMJO\",\"recipeImg\":\"RecipeCard_recipeImg__cxGnz\",\"recipeTitle\":\"RecipeCard_recipeTitle__u3yR1\",\"recipeTime\":\"RecipeCard_recipeTime__+1iB9\",\"recipeText\":\"RecipeCard_recipeText__2pAFU\"};","import React from 'react';\n\nimport style from '../RecipeCard/RecipeCard.module.scss';\n\nexport const RecipeCard = ({ recipe }) => {\n  const { title, preview, _id, time, description } = recipe;\n  return (\n    <li className={style.recipeEll}>\n      <a href={`/recipe/${_id.$oid}`}>\n        <img className={style.recipeImg} src={preview} alt=\"recipe prewiew\" />\n        <p className={style.recipeTitle}>{title}</p>\n        <div className={style.recipeOverlay}>\n          <p className={style.recipeTime}>{`ðŸ•” ${time} min`}</p>\n          <p className={style.recipeText}>{description}</p>\n        </div>\n      </a>\n    </li>\n  );\n};\n","import './Categories.scss';\n\nimport Tab from '@mui/material/Tab';\nimport TabContext from '@mui/lab/TabContext';\nimport TabList from '@mui/lab/TabList';\nimport TabPanel from '@mui/lab/TabPanel';\n///temp\nimport dishes from '../../api/fakeApi/fakeFavoriteDB.json';\n//\n// import { CategoriesItem } from './CategoriesItem/CategoriesItem';\nimport { useEffect, useState } from 'react';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { RecipeCard } from 'components/RecipeCard/RecipeCard';\n\n\nimport { GlobalStyles } from 'components/theme/GlobalStyles';\nconsole.log(GlobalStyles)\n\nexport const Categories = () => {\n  const [value, setValue] = useState('Beef');\n  const [dishData, setDishData] = useState([]);\n  const [allCategories, setAllCategories] = useState([]);\n\n  useEffect(() => {\n    setAllCategories(dishes.map(dish => dish.category));\n    setDishData(dishes.filter(dish => dish.category === value));\n  }, [value]);\n  const handleChange = (event, newValue) => {\n    setValue(event.target.textContent);\n    setDishData(dishes.filter(dish => dish.category === value));\n  };\n  const unicCategories = allCategories.filter(\n    (course, index, array) => array.indexOf(course) === index\n  );\n\n  return (\n    <div className=\"categories\">\n      <h2 className=\"categories-title\">Categorises</h2>\n      <TabContext value={value}>\n        <div className=\"categories-switcher\">\n          <TabList\n            variant=\"scrollable\"\n            scrollButtons=\"auto\"\n            onChange={handleChange}\n            sx={{\n              '& .MuiTabs-scroller': {\n                '& .css-1aquho2-MuiTabs-indicator': {\n                  backgroundColor: '#8BAA36',\n                },\n              },\n              '& .MuiTabs-flexContainer': {\n                gap: '28px',\n                '@media (min-width: 768px)': {\n                  gap: '55px',\n                },\n                '& :hover': {\n                  color: '#8BAA36',\n                },\n              },\n\n              '& .MuiTab-root': {\n                textTransform: 'capitalize',\n                minWidth: '0',\n                fontSize: '18px',\n                fontFamily: 'Poppins',\n                fontWeight: '400',\n                lineHeight: '18px',\n                borderColor: '#8BAA36',\n              },\n              '& .MuiSvgIcon-root': {\n                fill: '#BDBDBD',\n                '& :hover': {\n                  fill: '#8BAA36',\n                },\n              },\n            }}\n          >\n            {unicCategories.map(category => {\n              return (\n                <Tab\n                  label={category}\n                  value={category}\n                  key={nanoid()}\n                  sx={{\n                    padding: '0',\n                    color: '#BDBDBD',\n                    '&.Mui-selected': {\n                      color: '#8BAA36',\n                    },\n                  }}\n                />\n              );\n            })}\n          </TabList>\n        </div>\n        <TabPanel value={value} sx={{ p: 0 }}>\n          <ul className=\"categories-cards\">\n            {dishData.length > 0 ? (\n              dishData.map(recipe => {\n                return <RecipeCard key={recipe._id.$oid} recipe={recipe} />;\n              })\n            ) : (\n              <div>Loading...</div>\n            )}\n          </ul>\n        </TabPanel>\n      </TabContext>\n    </div>\n  );\n};\n","import { Categories } from 'components/Categories/Categories';\nimport React from 'react';\n\nconst CategoriesPage = () => {\n  return (\n    <div>\n      <Categories />\n    </div>\n  );\n};\n\nexport default CategoriesPage;\n"],"names":["RecipeCard","recipe","title","preview","_id","time","description","className","style","href","$oid","src","alt","console","log","GlobalStyles","Categories","useState","value","setValue","dishData","setDishData","allCategories","setAllCategories","useEffect","dishes","dish","category","unicCategories","filter","course","index","array","indexOf","TabContext","TabList","variant","scrollButtons","onChange","event","newValue","target","textContent","sx","backgroundColor","gap","color","textTransform","minWidth","fontSize","fontFamily","fontWeight","lineHeight","borderColor","fill","map","Tab","label","padding","nanoid","TabPanel","p","length"],"sourceRoot":""}