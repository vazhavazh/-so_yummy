{"version":3,"file":"static/js/761.84e975f8.chunk.js","mappings":"gOACaA,EAAiB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC/B,OACE,iBAAKC,UAAU,kBAAf,WACE,gBAAKC,IAAKF,EAAKG,QAASC,IAAI,GAAGH,UAAU,yBAEzC,gBAAKA,UAAU,iCAAf,UACE,cAAGA,UAAU,sCAAb,SAAoDD,EAAKK,YAIhE,E,oBCEYC,EAAa,WACxB,OAA0BC,EAAAA,EAAAA,UAAS,QAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KACA,GAA0CJ,EAAAA,EAAAA,UAAS,IAAnD,eAAOK,EAAP,KAAsBC,EAAtB,MAGAC,EAAAA,EAAAA,YAAU,WACRD,EAAiBE,EAAAA,KAAW,SAAAC,GAAI,OAAIA,EAAKC,QAAT,KAChCN,EAAYI,EAAAA,QAAc,SAAAC,GAAI,OAAIA,EAAKC,WAAaT,CAAtB,IAC/B,GAAE,CAACA,IACJ,IAIMU,EAAiBN,EAAcO,QACnC,SAACC,EAAQC,EAAOC,GAAhB,OAA0BA,EAAMC,QAAQH,KAAYC,CAApD,IAGF,OACE,iBAAKpB,UAAU,aAAf,WACE,eAAIA,UAAU,mBAAd,SAAiC,iBACjC,UAACuB,EAAA,GAAD,CAAYhB,MAAOA,EAAnB,WACE,gBAAKP,UAAU,sBAAf,UACE,SAACwB,EAAA,EAAD,CACEC,QAAQ,aACRC,cAAc,OACdC,SAhBW,SAACC,EAAOC,GAC3BrB,EAASoB,EAAME,OAAOC,aACtBrB,EAAYI,EAAAA,QAAc,SAAAC,GAAI,OAAIA,EAAKC,WAAaT,CAAtB,IAC/B,EAcSyB,GAAI,CACF,sBAAuB,CACrB,mCAAoC,CAClCC,gBAAiB,YAGrB,2BAA4B,CAC1BC,IAAK,OACL,4BAA6B,CAC3BA,IAAK,QAEP,WAAY,CACVC,MAAO,YAIX,iBAAkB,CAChBC,cAAe,aACfC,SAAU,IACVC,SAAU,OACVC,WAAY,UACZC,WAAY,MACZC,WAAY,OACZC,YAAa,WAEf,qBAAsB,CACpBC,KAAM,UACN,WAAY,CACVA,KAAM,aAhCd,SAqCG1B,EAAe2B,KAAI,SAAA5B,GAClB,OACE,SAAC6B,EAAA,EAAD,CACEC,MAAO9B,EACPT,MAAOS,EAEPgB,GAAI,CACFe,QAAS,IACTZ,MAAO,UACP,iBAAkB,CAChBA,MAAO,cALNa,EAAAA,EAAAA,UAUV,SAGL,SAACC,EAAA,EAAD,CAAU1C,MAAOA,EAAOyB,GAAI,CAAEkB,EAAG,GAAjC,UACE,gBAAKlD,UAAU,mBAAf,SACGS,EAAS0C,OAAS,EACjB1C,EAASmC,KAAI,SAAA7B,GACX,OAAO,SAAC,EAAD,CAAgBhB,KAAMgB,IAAWiC,EAAAA,EAAAA,UACzC,KAED,yBAAK,wBAOlB,EC9FD,EARuB,WACrB,OACE,0BACE,SAAC,EAAD,KAGL,C","sources":["components/Categories/CategoriesItem/CategoriesItem.jsx","components/Categories/Categories.jsx","pages/CategoriesPage.jsx"],"sourcesContent":["import './CategoriesItem.scss';\nexport const CategoriesItem = ({ data }) => {\n  return (\n    <div className=\"categories_item\">\n      <img src={data.preview} alt=\"\" className=\"categories_item-img\" />\n\n      <div className=\"categories_item-text_container\">\n        <p className=\"categories_item-text_container-text\">{data.title}</p>\n      </div>\n    </div>\n  );\n};\n","import './Categories.scss';\n\nimport Tab from '@mui/material/Tab';\nimport TabContext from '@mui/lab/TabContext';\nimport TabList from '@mui/lab/TabList';\nimport TabPanel from '@mui/lab/TabPanel';\n///temp\nimport dishes from '../../api/fakeApi/fakeFavoriteDB.json';\n//\nimport { CategoriesItem } from './CategoriesItem/CategoriesItem';\nimport { useEffect, useState } from 'react';\nimport { nanoid } from '@reduxjs/toolkit';\n\nexport const Categories = () => {\n  const [value, setValue] = useState('Beef');\n  const [dishData, setDishData] = useState([]);\n  const [allCategories, setAllCategories] = useState([]);\n  //   const [unicCategories, setUnicCategories] = useState([]);\n\n  useEffect(() => {\n    setAllCategories(dishes.map(dish => dish.category));\n    setDishData(dishes.filter(dish => dish.category === value));\n  }, [value]);\n  const handleChange = (event, newValue) => {\n    setValue(event.target.textContent);\n    setDishData(dishes.filter(dish => dish.category === value));\n  };\n  const unicCategories = allCategories.filter(\n    (course, index, array) => array.indexOf(course) === index\n  );\n\n  return (\n    <div className=\"categories\">\n      <h2 className=\"categories-title\">Categorises</h2>\n      <TabContext value={value}>\n        <div className=\"categories-switcher\">\n          <TabList\n            variant=\"scrollable\"\n            scrollButtons=\"auto\"\n            onChange={handleChange}\n            sx={{\n              '& .MuiTabs-scroller': {\n                '& .css-1aquho2-MuiTabs-indicator': {\n                  backgroundColor: '#8BAA36',\n                },\n              },\n              '& .MuiTabs-flexContainer': {\n                gap: '28px',\n                '@media (min-width: 768px)': {\n                  gap: '55px',\n                },\n                '& :hover': {\n                  color: '#8BAA36',\n                },\n              },\n\n              '& .MuiTab-root': {\n                textTransform: 'capitalize',\n                minWidth: '0',\n                fontSize: '18px',\n                fontFamily: 'Poppins',\n                fontWeight: '400',\n                lineHeight: '18px',\n                borderColor: '#8BAA36',\n              },\n              '& .MuiSvgIcon-root': {\n                fill: '#BDBDBD',\n                '& :hover': {\n                  fill: '#8BAA36',\n                },\n              },\n            }}\n          >\n            {unicCategories.map(category => {\n              return (\n                <Tab\n                  label={category}\n                  value={category}\n                  key={nanoid()}\n                  sx={{\n                    padding: '0',\n                    color: '#BDBDBD',\n                    '&.Mui-selected': {\n                      color: '#8BAA36',\n                    },\n                  }}\n                />\n              );\n            })}\n          </TabList>\n        </div>\n        <TabPanel value={value} sx={{ p: 0 }}>\n          <div className=\"categories-cards\">\n            {dishData.length > 0 ? (\n              dishData.map(dish => {\n                return <CategoriesItem data={dish} key={nanoid()} />;\n              })\n            ) : (\n              <div>Loading...</div>\n            )}\n          </div>\n        </TabPanel>\n      </TabContext>\n    </div>\n  );\n};\n","import { Categories } from 'components/Categories/Categories';\nimport React from 'react';\n\nconst CategoriesPage = () => {\n  return (\n    <div>\n      <Categories />\n    </div>\n  );\n};\n\nexport default CategoriesPage;\n"],"names":["CategoriesItem","data","className","src","preview","alt","title","Categories","useState","value","setValue","dishData","setDishData","allCategories","setAllCategories","useEffect","dishes","dish","category","unicCategories","filter","course","index","array","indexOf","TabContext","TabList","variant","scrollButtons","onChange","event","newValue","target","textContent","sx","backgroundColor","gap","color","textTransform","minWidth","fontSize","fontFamily","fontWeight","lineHeight","borderColor","fill","map","Tab","label","padding","nanoid","TabPanel","p","length"],"sourceRoot":""}